name: Build-and-Test-Manifest

#Запуск на любой пуш в любую ветку отличную от master/yandex
on:
  push:
    branches-ignore:
      - master
      - yandex

env:
  image_pull_secret_acr: sravni-azurecr-io

#Описание Джобов воркфлоу
jobs:
#Описание Джобы build_and_test и ее шагов:
  build_and_test:
    #runs-on указывает какой раннер будет использоваться для запуска данной Джобы
    #ubuntu-latest - офф раннер гитхаба на основе дистрибутива ubuntu
    #раннеры на основе других дистрибутивов можно найти в следующей доке:
    #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
    #                           !!!!!!!!!!!!ВАЖНО!!!!!!!!!!
    #sravni_ycloud_stage - наш раннер, необходимо указывать при наличии интегротестов
    #                          !!!!!!!!!!!!!!!!!!!!!!!!!!!!
    runs-on: ubuntu-latest

    steps:
      #checkout - собственно чекаут репозитория
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Setup docker context for buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          endpoint: builders
          driver: kubernetes

      #Шаг получения необходимых переменных для работы пайплайна
      #service_name - получается из имени репозитория, например osago-frontend
      #branch - собственно бранча на которой запустился пайплайн
      #build_number - тег нашего образа, состоит из sha коммита и постфикса qa для стейдж окружения, для прода постфикс отсутствует
      #image_name - полное имя образа, к примеру sravni.azurecr.io/osago-frontend:ha751ufq
      - name: Set build vars to GITHUB_ENV
        run: |
          service_name=$(basename `git rev-parse --show-toplevel`)
          build_number=$(echo ${GITHUB_SHA} | cut -c1-7)
          image_name="${{ secrets.CONTAINER_REGISTRY }}/${service_name}-service:${build_number}"
          echo "build_number=$build_number" >> $GITHUB_ENV
          echo "image_name=$image_name" >> $GITHUB_ENV

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      #Шаг установки buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      #Шаг билда контейнера без пуша
      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          build-args: |
            build_number=${{ env.build_number }}
            GITHUB_NPM_TOKEN=${{ secrets.GH_TOKEN }}
            GITHUB_USERNAME=sravni
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
          push: false
          tags: "${{ env.image_name }}"

      # Сканирование образа на уязвимости
      - name: Trivy Scanning
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.image_name }}'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
