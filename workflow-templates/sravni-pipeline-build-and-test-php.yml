#Имя воркфлоу - будет отображаться во вкладке Actions в гитхабе
name: Build-and-Test-Multi-Services

#Запуск на любой пуш в любую ветку отличную от master/yandex
on:
  push:
    branches-ignore:
      - master
      - yandex

env:
  image_pull_secret_acr: sravni-azurecr-io

#Описание Джобов воркфлоу
jobs:
  #Описание Джобы get_services и ее шага, в котором происходит составление
  #матрицы сервисов по маске *.Service и ее сохранения для дальнейшего использования
  get_services:
    runs-on: ubuntu-latest

    outputs:
      services: ${{ steps.get-services.outputs.services }}

    steps:
      - uses: actions/checkout@v3
      - name: Get services
        id: get-services
        run: |
          services=$(ls -d .k8s/services/*.Service | sed 's|.*/\([^/]*\)$|\1|' | jq -R '[.]' | jq -s -c 'add')
          echo "services list: ${services}"
          echo "services=${services}" >> $GITHUB_OUTPUT

#Описание Джобы build_and_test и ее шагов:
  build_and_test:
    #runs-on указывает какой раннер будет использоваться для запуска данной Джобы
    #ubuntu-latest - офф раннер гитхаба на основе дистрибутива ubuntu
    #раннеры на основе других дистрибутивов можно найти в следующей доке:
    #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
    #                           !!!!!!!!!!!!ВАЖНО!!!!!!!!!!
    #sravni_ycloud_stage - наш раннер, необходимо указывать при наличии интегротестов
    #                          !!!!!!!!!!!!!!!!!!!!!!!!!!!!
    runs-on: ubuntu-latest
    needs: [get_services]

    strategy:
      matrix:
        service: ${{ fromJson(needs.get_services.outputs.services) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set build vars to GITHUB_ENV
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          branch=$(echo ${GITHUB_REF#refs/heads/})
          sha=$(echo ${GITHUB_SHA} | cut -c1-7)
          build_number=$sha-qa
          image_name="${{ secrets.CONTAINER_REGISTRY }}/${service_name}:${build_number}"
          echo "service_name=$service_name" >> $GITHUB_ENV
          echo "branch=$branch" >> $GITHUB_ENV
          echo "build_number=$build_number" >> $GITHUB_ENV
          echo "image_name=$image_name" >> $GITHUB_ENV

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      #Шаг установки buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker

      #Шаг сборки образа (без пуша)
      - name: Docker build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/services/${{ matrix.service }}/Dockerfile
          build-args: |
            build_number=${{ env.build_number }}
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
            GITHUB_USERNAME=sravni
            GITHUB_NPM_TOKEN=${{ secrets.GH_TOKEN }}
          push: false
          tags: "${{ env.image_name }}"

      # Сканирование образа на уязвимости
      - name: Trivy Scanning
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.image_name }}'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
