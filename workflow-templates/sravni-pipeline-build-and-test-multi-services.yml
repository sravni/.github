name: Build-and-Test-Multi-Services

#Запуск на любой пуш в ветку отличную от мастера
on:
  push:
    branches-ignore:
      - master

env:
  #Переменная для определения пренадлежности к команде, задается в secrets репозитория
  team: ${{ secrets.TEAM }}
  image_pull_secret_acr: sravni-azurecr-io

jobs:
  get_services:
    runs-on: ubuntu-latest

    outputs:
      services: ${{ steps.get-services.outputs.services }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

        #Шаг получения массива сервисов из репозитория
        - name: Get services
        id: get-services
        run: |
          services=(*.Service)
          echo "Services list: ${services}"
          echo "::set-output name=services::${services}"

  build_and_test:
    runs-on: ubuntu-latest
    needs: [get_services]

    strategy:
      matrix:
        service: ${{ needs.get_services.outputs.services }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      #Шаг получения необходимых переменных для работы пайплайна
      #service_name - получается из имени репозитория, например osago-frontend
      #branch - собственно бранча на которой запустился пайплайн
      #build_number - тег нашего образа, состоит из sha коммита и постфикса qa для стейдж окружения, для прода постфикс отсутствует
      #image_name - полное имя образа, к примеру sravni.azurecr.io/osago-frontend:ha751ufq
      - name: Set build vars to GITHUB_ENV
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          branch=$(echo ${GITHUB_REF#refs/heads/})
          sha=$(echo ${GITHUB_SHA} | cut -c1-7)
          build_number=$sha-qa
          image_name="${{ secrets.CONTAINER_REGISTRY }}/${service_name}:${build_number}"
          echo "service_name=$service_name" >> $GITHUB_ENV
          echo "branch=$branch" >> $GITHUB_ENV
          echo "build_number=$build_number" >> $GITHUB_ENV
          echo "image_name=$image_name" >> $GITHUB_ENV

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      #Шаг проверки существования сеттингов для сервиса
      - name: Check settings exists
        run: |
          dir=${{ matrix.service }}
          settings=$dir/appsettings.json
          stage_settings=$dir/appsettings.Staging.json
          prod_settings=$dir/appsettings.Production.json
          [[ ! -f $settings ]] && echo "File $settings doesn't exist" && exit 1
          [[ ! -f $stage_settings ]] && echo "File $stage_settings doesn't exist" && exit 1
          [[ ! -f $prod_settings ]] && echo "File $prod_settings doesn't exist" && exit 1
          echo $dir-s settings OK

      #Шаг валидации ямликов
      - name: Validate values files
        uses: addnab/docker-run-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          image: ${{ secrets.CONTAINER_REGISTRY }}/qa-environment-helpers:${{ secrets.QA_ENVIRONMENT_HELPERS_TAG }}
          options: --rm -i -v ${{ github.workspace }}:/app
          run: |
            for file in /app/${{ matrix.service }}/.k8s/*.yaml;
            do
              yamale -s /charts/generic-application/schema.yaml $file
            done

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      #Шаг сборки образа (без пуша)
      - name: Docker Build
        run: |
          echo "Building image ${{ env.image_name }}"
          docker buildx build \
            --progress plain \
            --load \
            --force-rm \
            --build-arg GITHUB_USERNAME=${{ secrets.NUGET_USERNAME }} \
            --build-arg GITHUB_TOKEN=${{ secrets.GH_TOKEN }} \
            -t "${{ env.image_name }}" -f "./${{ matrix.service }}/Dockerfile" .

      #Сканирование образа на уязвимости
      - name: Trivy Scanning
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.image_name }}'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
