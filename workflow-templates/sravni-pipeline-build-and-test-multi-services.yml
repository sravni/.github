#Имя воркфлоу - будет отображаться во вкладке Actions в гитхабе
name: Build-and-Test-Multi-Services

#Запуск на любой пуш в любую ветку отличную от master/yandex
on:
  push:
    branches-ignore:
      - master
      - yandex

env:
  image_pull_secret_acr: sravni-azurecr-io

#Описание Джобов воркфлоу
jobs:
  #Описание Джобы get_services и ее шага, в котором происходит составление
  #матрицы бэкоффисов по маске *.Services и ее сохранения для дальнейшего использования
  get_services:
    runs-on: ubuntu-latest

    outputs:
      services: ${{ steps.get-services.outputs.services }}

    steps:
      - uses: actions/checkout@v2
      - name: Get services
        id: get-services
        run: |
          services=$(ls -d *.Service | jq -R '[.]' | jq -s -c 'add')
          echo "Services list: ${services}"
          echo "::set-output name=services::${services}"

#Описание Джобы build_and_test и ее шагов:
  build_and_test:
    #runs-on указывает какой раннер будет использоваться для запуска данной Джобы
    #ubuntu-latest - офф раннер гитхаба на основе дистрибутива ubuntu
    #раннеры на основе других дистрибутивов можно найти в следующей доке:
    #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
    #                           !!!!!!!!!!!!ВАЖНО!!!!!!!!!!
    #sravni_ycloud_stage - наш раннер, необходимо указывать при наличии интегротестов
    #                          !!!!!!!!!!!!!!!!!!!!!!!!!!!!
    runs-on: ubuntu-latest
    needs: [get_services]

    #Все шаги будут примерняться на матрице, полученной в предыдущей джобе
    strategy:
      matrix:
        service: ${{ fromJson(needs.get_services.outputs.services) }}

    #checkout - собственно чекаут репозитория
    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      #Шаг получения необходимых переменных для работы пайплайна
      #service_name - получается из имени репозитория, например osago-frontend
      #build_number - тег нашего образа, состоит из sha коммита и постфикса qa для стейдж окружения, для прода постфикс отсутствует
      #image_name - полное имя образа, к примеру sravni.azurecr.io/osago-frontend:ha751ufq
      - name: Set build vars to GITHUB_ENV
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          build_number=$(echo ${GITHUB_SHA} | cut -c1-7)
          image_name="${{ secrets.CONTAINER_REGISTRY }}/${service_name}:${build_number}"
          echo "build_number=$build_number" >> $GITHUB_ENV
          echo "image_name=$image_name" >> $GITHUB_ENV

      #Шаг логина в наш реджестри в Azure
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      #Шаг сборки образа (без пуша)
      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          build-args: |
            build_number=${{ env.build_number }}
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
            GITHUB_USERNAME=${{ secrets.NUGET_USERNAME }}
            GITHUB_NPM_TOKEN=${{ secrets.GH_TOKEN }}
          push: false
          tags: "${{ env.image_name }}"
