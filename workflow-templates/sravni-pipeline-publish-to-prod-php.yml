name: Publish-to-Prod-PHP-Multi-Services

#Запуск на проставление тега или выпуск релиза
on:
  push:
    tags:
      - v[0-9]+.[0-9]+
  release:
    types:
      - published

#Переменные окружения !!!!!!!!ВАЖНО!!!!!!!!! необходимо прописать свою команду
env:
  team: <team_name>
  image_pull_secret_acr: sravni-azurecr-io

#Описание Джобов воркфлоу
jobs:
  #Описание Джобы get_services и ее шага, в котором происходит составление
  #матрицы бэкоффисов по маске *.Services и ее сохранения для дальнейшего использования
  get_services:
    runs-on: ubuntu-latest

    outputs:
      services: ${{ steps.get-services.outputs.services }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Get services
        id: get-services
        run: |
          services=$(ls -d .k8s/services/*.Service | sed 's|.*/\([^/]*\)$|\1|' | jq -R '[.]' | jq -s -c 'add')
          echo "services list: ${services}"
          echo "services=${services}" >> $GITHUB_OUTPUT

#Описание джобы prepublish
  prepublish:
    #runs-on указывает какой раннер будет использоваться для запуска данной Джобы
    #ubuntu-latest - офф раннер гитхаба на основе дистрибутива ubuntu
    #раннеры на основе других дистрибутивов можно найти в следующей доке:
    #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
    #                           !!!!!!!!!!!!ВАЖНО!!!!!!!!!!
    #sravni_ycloud_stage - наш раннер, необходимо указывать при наличии интегротестов
    #                          !!!!!!!!!!!!!!!!!!!!!!!!!!!!
    runs-on: ubuntu-latest
    needs: [get_services]

    outputs:
      branch: ${{ env.branch }}
      service_name: ${{ env.service_name }}
      build_number: ${{ env.build_number }}

    strategy:
      matrix:
        service: ${{ fromJson(needs.get_services.outputs.services) }}

    steps:
      #checkout - собственно чекаут репозитория
      - name: Checkout source
        uses: actions/checkout@v3

      #Шаг получения необходимых переменных для работы пайплайна
      #service_name - получается из имени репозитория, например osago-frontend
      #build_number - тег нашего образа, состоит из sha коммита и постфикса qa для стейдж окружения, для прода постфикс отсутствует
      #image_name - полное имя образа, к примеру sravni.azurecr.io/osago-frontend:ha751ufq
      - name: Set build vars to GITHUB_ENV
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          build_number=$(echo ${GITHUB_SHA} | cut -c1-7)
          image_name="${{ secrets.CONTAINER_REGISTRY }}/${service_name}:${build_number}"
          echo "branch=$branch" >> $GITHUB_ENV
          echo "build_number=$build_number" >> $GITHUB_ENV
          echo "image_name=$image_name" >> $GITHUB_ENV

      #Шаг логина в наш реджестри в Azure
      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      #Шаг сборки образа (с пушем)
      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/services/${{ matrix.service }}/Dockerfile
          build-args: |
            build_number=${{ env.build_number }}
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
            GITHUB_USERNAME=sravni
            GITHUB_NPM_TOKEN=${{ secrets.GH_TOKEN }}
          push: true
          tags: "${{ env.image_name }}"

#Описание джобы publish
  publish:
    runs-on: ubuntu-latest
    needs: [prepublish, get_services]

    #Все шаги будут примерняться на матрице, полученной в предыдущей джобе
    strategy:
      matrix:
        service: ${{ fromJson(needs.get_services.outputs.services) }}

    #Все шаги будут использовать переменные окружения с предыдущей джобы
    env:
      build_number: ${{ needs.prepublish.outputs.build_number }}
      branch: ${{ needs.prepublish.outputs.branch }}
      service_name: ${{ needs.prepublish.outputs.service_name }}

    steps:

      - name: Install werf CLI
        uses: werf/actions/install@v1.2

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 3.8.2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Checkout qaenv helpers
        uses: actions/checkout@v3
        with:
          repository: sravni/qa-environment-helpers
          path: qaenv
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ secrets.QAENV_REF }}

      - name: Checkout helm repo
        uses: actions/checkout@v3
        with:
          repository: sravni/helm-charts
          path: charts
          token: ${{ secrets.GH_TOKEN }}
          ref: '${{ secrets.CHARTS_REF }}'

      #Шаг деплоя в прод Azure
      - name: Publish
        working-directory: ./charts/generic-application/
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          echo "Deploying service ${service_name}..."
          az aks get-credentials --admin \
            --resource-group sravni \
            --name az-prod-k8s
          helm dependencies update
          werf helm upgrade --install \
            "${service_name}" \
            --namespace sravni \
            --atomic \
            --timeout 10m \
            --set global.image.repository="${{ secrets.CONTAINER_REGISTRY }}/${service_name}" \
            --set global.image.tag="${{ env.build_number }}" \
            --set global.imagePullSecrets[0]="${{ env.image_pull_secret_acr }}" \
            --set azureRedis.uri=${{ secrets.AZURE_REDIS_URI }} \
            --set linkerd.enabled=false \
            -f ../../.k8s/services/"${{ matrix.service }}"/azure.yaml \
            ./ \
            2>&1
          if [ $? != 0 ]; then
            echo "Publish failed, see logs" && exit 1
          fi
          echo "Done"

      #Шаги выставления стейда деплоя
      - name: Failed Deployment
        if: ${{ failure() }}
        run: echo "DEPLOY_STATE=failed" >> $GITHUB_ENV

      - name: Successful Deployment
        if: ${{ success() }}
        run: echo "DEPLOY_STATE=successful" >> $GITHUB_ENV

      #Шаги подготовки данных для пуша деплоймента в Jira
      - name: Parse Jira Keys from All Commits
        id: jira_keys
        if: ${{ always() }}
        uses: HighwayThree/jira-extract-issue-keys@master
        with:
          is-pull-request: ${{ github.event_name == 'pull_request' }}
          parse-all-commits: ${{ github.event_name == 'push' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Confirm Deploy State and Jira Key Values
        if: ${{ always() }}
        run: |
          echo "DEPLOY_STATE: ${{ env.DEPLOY_STATE }}"
          echo "Jira Keys: ${{ steps.jira_keys.outputs.jira-keys }}"

      - name: Build deployment name
        if: ${{ always() }}
        run: |
          dep_url="${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
          title="@${{env.committer}} опубликовал(а) релиз \`${{ matrix.service }}\`"
          title+=" версии <${dep_url}|'${{env.build_number}}'> из ветки \`${{env.branch}}\`"
          echo "DEPLOY_NAME=${title}" >> $GITHUB_ENV

      #Шаг пуша деплоймента в Jira
      - name: Push Deployment Info to Jira
        if: steps.jira_keys.outputs.jira-keys != ''
        id: push_deployment_info_to_jira
        uses: HighwayThree/jira-upload-deployment-info@master
        with:
          cloud-instance-base-url: 'https://sravniru.atlassian.net'
          client-id: '${{ secrets.JIRA_CLIENT_ID }}'
          client-secret: '${{ secrets.JIRA_CLIENT_SECRET }}'
          deployment-sequence-number: '${{ github.run_id }}'
          update-sequence-number: '${{ github.run_id }}'
          issue-keys: "${{ steps.jira_keys.outputs.jira-keys }}"
          display-name: "${{ env.DEPLOY_NAME }}"
          url: "${{ github.event.repository.url }}/actions/runs/${{ github.run_id }}"
          description: "Prod Deployment"
          last-updated: '${{ github.event.head_commit.timestamp }}'
          label: 'Prod Deployment Label'
          state: '${{ env.DEPLOY_STATE }}'
          pipeline-id: '${{ github.repository }} ${{ github.workflow }}'
          pipeline-display-name: 'Workflow: ${{ github.workflow }} (#${{ github.run_number }})'
          pipeline-url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          environment-id: 'Production'
          environment-display-name: 'Production'
          environment-type: 'production'
