name: Publish to yandex mpl production projects base module

on:
  workflow_call:
    inputs:
      projects:
        description: "JSON объект со списком проектов для публикации"
        required: true
        type: string
      runner:
        description: "Указывает какой раннер будет использоваться для запуска флоу"
        default: "marketplace_prod_workloads"
        required: false
        type: string
      namespace:
        description: 'Namespace'
        required: true
        type: string
    secrets: 
      GH_TOKEN:
        required: true
      CONTAINER_REGISTRY:
        required: true
      DOCKER_LOGIN:
        required: true
      DOCKER_PASS:
        required: true
      CHARTS_REF:
        required: true




env:
  NAMESPACE: ${{ inputs.namespace }}
  IMAGE_PULL_SECRET_ACR: sravni-azurecr-io

jobs:
  publish:
    runs-on: ${{ inputs.runner }}

    #Все шаги будут примерняться на матрице, полученной в предыдущей джобе
    strategy:
      matrix:
        project: ${{ fromJson(inputs.projects) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Install werf CLI
        uses: werf/actions/install@v1.2

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: 3.8.2

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Checkout helm repo
        uses: actions/checkout@v2
        with:
          repository: sravni/helm-charts
          path: charts
          token: ${{ secrets.GH_TOKEN }}
          ref: '${{ secrets.CHARTS_REF }}'
      
      
      - name: Define chart directory
        run: |
          if echo "${{ matrix.project.project_name }}" | grep -iqF "job" 
          then chart_directory="./charts/cronjobs/"
          else chart_directory="./charts/generic-application/"
          fi
          echo "CHART_DIRECTORY=$chart_directory" >> $GITHUB_ENV

      #Шаг деплоя в прод Yandex
      - name: Publish
        working-directory: ${{ env.CHART_DIRECTORY }}
        run: |       
          mkdir ~/.kube && echo "${{ secrets.MPL_PROD_WORKLOADS_KUBE_CONFIG }}" > ~/.kube/config
          project_name="${{ matrix.project.project_name }}"
          helm dependencies update
          werf helm upgrade --install --history-max 2 \
            "$project_name" \
            --namespace "${{ env.NAMESPACE }}" \
            --timeout 10m \
            --wait \
            --set global.image.repository="${{ secrets.CONTAINER_REGISTRY }}/${{ matrix.project.project_name }}" \
            --set global.image.tag="${{ matrix.project.image_version }}" \
            --set global.imagePullSecrets[0]="${{ env.IMAGE_PULL_SECRET_ACR }}" \
            -f ../.././"${{ matrix.project.k8s_yaml_path }}" \
            ./ \
            2>&1
          if [ $? != 0 ]; then
            echo "Publish failed, see logs" && exit 1
          fi
          echo "Done"