name: Publish to yandex production projects base module

on:
  workflow_call:
    inputs:
      projects:
        description: "JSON объект со списком проектов для публикации"
        required: true
        type: string
      runner:
        description: "Указывает какой раннер будет использоваться для запуска флоу"
        default: sravni_prod
        required: false
        type: string
      namespace:
        description: 'Namespace'
        required: true
        type: string
    secrets: 
      GH_TOKEN:
        required: true
      CONTAINER_REGISTRY:
        required: true
      DOCKER_LOGIN:
        required: true
      DOCKER_PASS:
        required: true
      AZURE_CREDENTIALS:
        required: true
      CHARTS_REF:
        required: true
      AZURE_REDIS_URI:
        required: true

env:
  NAMESPACE: ${{ inputs.namespace }}
  IMAGE_PULL_SECRET_ACR: sravni-azurecr-io

jobs:
  publish:
    runs-on: ${{ inputs.runner }}

    #Все шаги будут примерняться на матрице, полученной в предыдущей джобе
    strategy:
      matrix:
        project: ${{ fromJson(inputs.projects) }}

    steps:
      - name: Install werf CLI
        uses: werf/actions/install@v1.2

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: Install Yandex cli
        run: |
          wget -P tmp/ https://storage.yandexcloud.net/yandexcloud-yc/release/0.85.0/linux/amd64/yc
          chmod +x tmp/yc
          mkdir -p /home/runner/.local/bin
          mv tmp/yc /home/runner/.local/bin/yc
          echo ${{ secrets.YANDEX_PROD_KEY }} | base64 --decode > tmp/key.json
          yc config profile create github
          yc config set service-account-key tmp/key.json
          yc managed-kubernetes \
            cluster get-credentials \
            --cloud-id ${{ secrets.YANDEX_PROD_CLOUD_ID }} \
            --folder-id ${{ secrets.YANDEX_PROD_FOLDER_ID }} \
            sravni-prod-k8s-workloads --internal
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Checkout helm repo
        uses: actions/checkout@v2
        with:
          repository: sravni/helm-charts
          path: charts
          token: ${{ secrets.GH_TOKEN }}
          ref: '${{ secrets.CHARTS_REF }}'
      
      
      - name: Define chart directory
        run: |
          if echo "${{ matrix.project.project_name }}" | grep -iqF "job" 
          then chart_directory="./charts/cronjobs/"
          else chart_directory="./charts/generic-application/"
          fi
          echo "CHART_DIRECTORY=$chart_directory" >> $GITHUB_ENV

      #Шаг деплоя в прод Azure
      - name: Publish
        working-directory: ${{ env.CHART_DIRECTORY }}
        run: |
          project_name="${{ matrix.project.project_name }}"
           helm dependencies update
          werf helm upgrade --install --history-max 2 \
            "$project_name" \
            --namespace "${{ env.NAMESPACE }}" \
            --timeout 10m \
            --wait \
            --set global.image.repository="${{ secrets.CONTAINER_REGISTRY }}/${{ matrix.project.project_name }}" \
            --set global.image.tag="${{ matrix.project.image_version }}" \
            --set global.imagePullSecrets[0]="${{ env.IMAGE_PULL_SECRET_ACR }}" \
            -f ../../.k8s/ya-prod.yaml \
            ./ \
            2>&1
          if [ $? != 0 ]; then
            echo "Publish failed, see logs" && exit 1
          fi
          echo "Done"