name: Build and Release InBrowser module

on:
    workflow_call:
        inputs:
            enviroment_file_name:
                description: "Имя файла {environment}.yaml в директории enviroment проекта получения переменных окружения на момент сборки проекта"
                required: true
                type: string
            project_folder:
                description: "Название папки в корне репозитория с проектом"
                required: true
                type: string
            branch:
                description: "Название ветки проекта, которую нужно релизнуть"
                required: false
                type: string
            runner:
                description: "Указывает какой раннер будет использоваться для запуска флоу"
                default: "sravni_infra"
                required: false
                type: string
            shared_folder:
                description: "Название папки в корне репозитория с общим кодом"
                required: false
                type: string
            is_stage:
                description: "Запускается ли план для публикации на стейдж"
                required: false
                default: false
                type: boolean
            team:
                description: "Название команды"
                required: false
                type: string

        secrets:
            SENTRY_SOURCEMAP_WEB_FRONTEND_AUTH_TOKEN:
                required: false
            GH_TOKEN:
                required: true
            S3_CDN_ENDPOINT:
                required: true
            S3_CDN_BUCKET:
                required: true
            S3_CDN_PUBLIC_PATH:
                required: true
            S3_CDN_ACCESS_KEY_ID:
                required: true
            S3_CDN_SECRET_ACCESS_KEY_ID:
                required: true

jobs:
    build_and_release:
        runs-on: ${{ inputs.runner }}
        steps:
          - uses: actions/checkout@v4
          - name: Setup Node.js
            uses: actions/setup-node@v1
            with:
              node-version: '18.x'
              registry-url: https://npm.pkg.github.com/
              scope: '@sravni'

          - name: Install yarn
            run: npm install -g yarn

          - name: Get Yarn cache path
            id: yarn-cache
            run: echo "::set-output name=dir::$(yarn cache dir)"

          - name: Load Yarn cache
            uses: actions/cache@v2
            with:
              path: ${{ steps.yarn-cache.outputs.dir }}
              key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
              restore-keys: |
                ${{ runner.os }}-yarn-

          - name: Install yq
            uses: chrisdickinson/setup-yq@latest
            with:
              yq-version: 'v4.30.3'

          - name: Install dependencies Shared
            if: inputs.shared_folder != ''
            env:
              NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
            run: yarn --cwd ./${{ inputs.shared_folder }} install --frozen-lockfile

          - name: Install dependencies Project
            env:
              NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
            run: |
              yarn --cwd ./${{ inputs.project_folder }} install --frozen-lockfile

          # - name: Replace variables in yaml file
          #   uses: vafinvr/template-env-action@master
          #   env:
          #     BRANCH: ${{ inputs.branch }}
          #     SENTRY_SOURCEMAP_WEB_FRONTEND_AUTH_TOKEN: ${{ secrets.SENTRY_SOURCEMAP_WEB_FRONTEND_AUTH_TOKEN }}
          #     S3_CDN_ENDPOINT: ${{ secrets.S3_CDN_ENDPOINT }}
          #     S3_CDN_BUCKET: ${{ secrets.S3_CDN_BUCKET }}
          #     S3_CDN_PUBLIC_PATH: ${{ secrets.S3_CDN_PUBLIC_PATH }}
          #     S3_CDN_ACCESS_KEY_ID: ${{ secrets.S3_CDN_ACCESS_KEY_ID }}
          #     S3_CDN_SECRET_ACCESS_KEY_ID: ${{ secrets.S3_CDN_SECRET_ACCESS_KEY_ID }}
          #   with:
          #     filename: ./${{ inputs.project_folder }}/enviroments/${{ inputs.enviroment_file_name }}

          - name: Replace variables in yaml file
            env:
              BRANCH: ${{ inputs.branch }}
              SENTRY_SOURCEMAP_WEB_FRONTEND_AUTH_TOKEN: ${{ secrets.SENTRY_SOURCEMAP_WEB_FRONTEND_AUTH_TOKEN }}
              S3_CDN_ENDPOINT: ${{ secrets.S3_CDN_ENDPOINT }}
              S3_CDN_BUCKET: ${{ secrets.S3_CDN_BUCKET }}
              S3_CDN_PUBLIC_PATH: ${{ secrets.S3_CDN_PUBLIC_PATH }}
              S3_CDN_ACCESS_KEY_ID: ${{ secrets.S3_CDN_ACCESS_KEY_ID }}
              S3_CDN_SECRET_ACCESS_KEY_ID: ${{ secrets.S3_CDN_SECRET_ACCESS_KEY_ID }}
              BRANCH: ${{ inputs.url_prefix || needs.get_branch_name.outputs.branch }}
              TEAM: ${{ needs.vars.outputs.team }}
              REPO_PATH: './deploy/${{ needs.vars.outputs.team }}'
              YQ_VERSION: '4.30.3'
              SCAN_TOKEN: ${{ secrets.VSK_TOKEN }}
              API_URL_DEPLOY_IN: https://89.169.173.82:19445/api/vizhn
              API_URL_DEPLOY_OUT: https://vizhn.sravni.local/api/vizhn
              REPO_NAME: ${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}
            run: |
              set -e
              FILENAME="./${{ inputs.project_folder }}/enviroments/${{ inputs.enviroment_file_name }}"

              if [ -z $FILENAME ]; then
                echo 'The path to the file is required'
                exit 1
              fi

              while IFS='=' read -r -a var; do
                echo "Setting ${var[0]} to ${var[1]} "
                echo ${var[1]} | wc -l
                sed -i "s|$(printf '%s\n' "\${${var[0]}}" | sed -e 's/[]\/$*.^[]/\\&/g')|${var[1]}|g" $FILENAME
              done < <(printenv)
            shell: bash

          - name: Read build enviroment values from yaml
            uses: dcarbone/yaml-to-env-action@v1.0.0
            with:
              yaml-file: './${{ inputs.project_folder }}/enviroments/${{ inputs.enviroment_file_name }}'

          - name: Build Shared
            if: inputs.shared_folder != ''
            env:
              NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
            run: yarn --cwd ./${{ inputs.shared_folder }} build

          - name: Build Project
            env:
              NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
            run: yarn --cwd ./${{ inputs.project_folder }} build

          - name: Publish Static
            run: yarn --cwd ./${{ inputs.project_folder }} publish:static

          - name: Publish single-spa module
            run: yarn --cwd ./${{ inputs.project_folder }} publish:singleSpaProject

          - name: Run SAST scan tests
            if: ${{ inputs.is_stage }}
            run: >
              curl --max-time 60 -X POST -k "${{ env.API_URL_DEPLOY_IN }}?&repo=${{ env.REPO_NAME }}&token=$SCAN_TOKEN" || curl --max-time 60 -X POST -k "${{ env.API_URL_DEPLOY_OUT }}?&repo=${{ env.REPO_NAME }}&token=$SCAN_TOKEN"
            continue-on-error: true