### Универсальный модуль публикации проектов на PROD
# Принимает на вход название команды и JSON с информацией о проектах для деплоя. 

name: Publish to prod projects base module

on:
  workflow_call:
    inputs:
      team:
        description: 'team'
        required: true 
        type: string
      projects:
        description: "JSON объект со списком проектов для публикации"
        required: true
        type: string
      url_prefix:
        description: "Префикс адреса ингресса (если пусто, то используется имя ветки)"
        required: false
        type: string
        default: ''
      runner:
        description: "Указывает какой раннер будет использоваться для запуска флоу"
        required: false
        default: sravni_prod
        type: string
      canary:
        required: false
        default: false
        type: string
    secrets: 
      TEST_CI_PAT_FOR_ACTIONS:
        required: true

env:
  TEAM: ${{ inputs.team }}
  CANARY: ${{ inputs.canary }}

jobs:
  vars: 
    name: Setup variables
    runs-on: ${{ inputs.runner }}
    outputs:
      team: ${{ steps.set_team.outputs.team }}
    steps:
      - name: Set team
        id: set_team
        run: echo "team=${TEAM,,}" >> $GITHUB_OUTPUT

  publish:
    runs-on: ${{ inputs.runner }}
    needs: [ vars ]

    env:
      TEAM: ${{ needs.vars.outputs.team }}
      REPO_PATH: './deploy/${{ needs.vars.outputs.team }}'
      YQ_VERSION: '4.30.3'

    strategy:
      max-parallel: 1
      matrix:
        project: ${{ fromJson(inputs.projects) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Checkout deploy repo
        uses: actions/checkout@v3
        with:
          repository: sravni/deploy
          token: ${{ secrets.TEST_CI_PAT_FOR_ACTIONS }}
          path: deploy
          ref: main
      
      # Проверка - существует ли приложение в dev окружении.
      - name: Ensure project exist
        run: |
          if [[ -d ${{ env.REPO_PATH }}/${{ matrix.project.project_name }} ]];
          then
            echo 'Проект ${{ env.REPO_PATH }}/${{ matrix.project.project_name }} уже существует'
          else
            echo 'Проект ${{ env.REPO_PATH }}/${{ matrix.project.project_name }} не существует, создайте его сначала в dev окружении!'
          fi;

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v${{ env.YQ_VERSION }}/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      # Копирование *.yaml файла с вэйльюсами из репы сервиса в deploy. Фактическое название файла приходит в JSON'е в projects.
      # Имя этого файла должно стать values_prod.yaml.
      - name: Clone values from origin repo
        run: >
          if [ "${{ env.CANARY }}" != true ];
          then 
          cat ${{ matrix.project.k8s_yaml_path }} > ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}/values_prod.yaml;
          fi;

      - name: Create app
        run: >
          if [ "${{ env.CANARY }}" != true ]; 
          then
          grep -xq '  - name: ${{ matrix.project.project_name }}' ${{ env.REPO_PATH }}/_apps/values_prod.yaml
          || yq e  -i '.services += {"name": "${{ matrix.project.project_name }}"}' ${{ env.REPO_PATH }}/_apps/values_prod.yaml;
          fi;

      # Для включенной опции канареечного релиза (canary: true) копируется файл *.yaml с вэйльюсами из репы сервиса в deploy. 
      # Фактическое название файла приходит в JSON'е в projects.
      # Имя этого файла должно стать values_prod.yaml.
      - name: Clone canary values from origin repo
        run: >
          if [ "${{ env.CANARY }}" = true ]; 
          then 
          cat ${{ matrix.project.k8s_yaml_path }} > ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}-canary/values_prod.yaml;
          fi;

      - name: Create canary app
        run: >
          if [ "${{ env.CANARY }}" = true ]; 
          then 
          grep -xq '  - name: ${{ matrix.project.project_name }}-canary' ${{ env.REPO_PATH }}/_apps/values_prod.yaml
          || yq e  -i '.services += {"name": "${{ matrix.project.project_name }}-canary"}' ${{ env.REPO_PATH }}/_apps/values_prod.yaml;
          fi;

      # Устанавливаем tag образа и убеждаемся, что установлены `global.image.repository` и `global.imagePullSecrets`
      - name: Modify values
        run: >
          if [ "${{ env.CANARY }}" != true ]; 
          then
          yq -i '.global.image.tag = "${{ matrix.project.image_version }}" |
          .global.image.repository = "registry.yc.prod.infra.sravni.market/${{ env.TEAM }}_prod/${{ matrix.project.project_name }}" |
          .global.imagePullSecrets[0] = "harbor-pull-secret"'
          ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}/values_prod.yaml;
          fi;

      # Устанавливаем tag образа для canary релиза и убеждаемся, что установлены `global.image.repository` и `global.imagePullSecrets`
      - name: Modify canary values
        run: >
          if [ "${{ env.CANARY }}" = true ]; 
          then
          yq -i '.global.image.tag = "${{ matrix.project.image_version }}" |
          .global.image.repository = "registry.yc.prod.infra.sravni.market/${{ env.TEAM }}_prod/${{ matrix.project.project_name }}" |
          .global.imagePullSecrets[0] = "harbor-pull-secret"'
          ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}-canary/values_prod.yaml;
          fi;

      # Добавляет коммит для поля info в Argo вида
      # commit: sravni/mortgageinsurance/commit/2b13e85a9c5e439b79e406f08a0cde673fa1f4a3
      - name: Adding commit SHA
        run: >
          if [ "${{ env.CANARY }}" != true ]; 
          then
          FULL_SHA=${GITHUB_SHA}
          && GIT_REPO=${GITHUB_REPOSITORY}
          && KEY=$(yq '.services | to_entries | .[] | select(.value.name == "${{ matrix.project.project_name }}") | .key' ${{ env.REPO_PATH }}/_apps/values_prod.yaml)
          && yq -i e ".services[$KEY].commit = \"$GIT_REPO/commit/$FULL_SHA\"" ${{ env.REPO_PATH }}/_apps/values_prod.yaml;
          fi;
      
      - name: Do rebase and commit
        run: >
          cd ./deploy 
          && git add .
          && git -c user.name="sravnidevops" -c user.email="company-service@sravni.ru" commit --author="${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>" -m "[PROD] ${{ matrix.project.project_name }} new version: ${{ matrix.project.image_version }} / run_id: ${{ github.run_id }}"
          && git -c user.name="sravnidevops" -c user.email="company-service@sravni.ru" pull --rebase
          && git push origin main || sleep 10
          && git -c user.name="sravnidevops" -c user.email="company-service@sravni.ru" pull --rebase
          && git push origin main 
          && cd ../
