name: Publish to stage projects base module

on:
  workflow_call:
    inputs:
      namespace:
        description: 'Namespace'
        required: true 
        type: string
      branch_name: 
        description: "Название ветки"
        required: true
        type: string
      projects:
        description: "JSON объект со списком проектов для публикации"
        required: true
        type: string
    secrets: 
      GH_TOKEN:
        required: true
      CONTAINER_REGISTRY:
        required: true
      DOCKER_LOGIN:
        required: true
      DOCKER_PASS:
        required: true
      YANDEX_KEY:
        required: true
      YANDEX_CLOUD_ID:
        required: true
      YANDEX_FOLDER_ID:
        required: true
      QA_API_URL:
        required: true

#Переменные окружения !!!!!!!!ВАЖНО!!!!!!!!! необходимо прописать свою команду
env:
  NAMESPACE: ${{ inputs.namespace }}
  BRANCH: ${{ inputs.branch_name }}
  IMAGE_PULL_SECRET_ACR: sravni-azurecr-io

#Описание Джобов воркфлоу
jobs:
  publish:
    runs-on: ubuntu-latest

    #Все шаги будут примерняться на матрице, полученной в предыдущей джобе
    strategy:
      matrix:
        project: ${{ fromJson(inputs.projects) }}

    steps:
      - name: Install werf CLI
        uses: werf/actions/install@v1.2

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: Install Yandex cli
        run:  |
          wget -P tmp/ https://storage.yandexcloud.net/yandexcloud-yc/release/0.85.0/linux/amd64/yc
          chmod +x tmp/yc
          mv tmp/yc /usr/local/bin/yc
          echo ${{ secrets.YANDEX_KEY }} | base64 --decode > tmp/key.json
          yc config profile create github
          yc config set service-account-key tmp/key.json
          yc managed-kubernetes \
            cluster get-credentials \
            --cloud-id ${{ secrets.YANDEX_CLOUD_ID }} \
            --folder-id ${{ secrets.YANDEX_FOLDER_ID }} \
            yc-stage-k8s --external

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Checkout qaenv helpers
        uses: actions/checkout@v2
        with:
          repository: sravni/qa-environment-helpers
          path: qaenv
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ secrets.QAENV_REF }}

      - name: Checkout helm repo
        uses: actions/checkout@v2
        with:
          repository: sravni/helm-charts
          path: charts
          token: ${{ secrets.GH_TOKEN }}
          ref: '${{ secrets.CHARTS_REF }}'

      #Шаг деплоя в стейдж
      - name: Publish
        working-directory: ./charts/generic-application/
        run: |
          project_name="${{ matrix.project.project_name }}"
          echo "Trying to deploy $project_name..."
          helm dependencies update
          werf helm upgrade --install \
            "$project_name" \
            --namespace "${{ env.NAMESPACE }}" \
            --timeout 10m \
            --wait \
            --set global.image.repository="${{ secrets.CONTAINER_REGISTRY }}/${{ matrix.project.project_name }}" \
            --set global.image.tag="${{ matrix.project.image_version }}" \
            --set global.imagePullSecrets[0]="${{ env.IMAGE_PULL_SECRET_ACR }}" \
            --set cronjobs.defaults.resources.enabled=false \
            --set resources.enabled=false \
            -f ../.././"${{ matrix.project.project_path }}"/.k8s/ya-stage.yaml \
            ./ \
            2>&1
          if [ $? != 0 ]; then
            echo "Publish failed, see logs" && exit 1
          fi
          echo "Done"

      #Шаг отправки информации о деплое в qa-dashboard
      - name: Set info about deployment to qa-environment-service
        if: ${{ success() }}
        run: |
          project_name="${{ matrix.project.project_name }}"
          echo "DEPLOY_STATE=successful" >> $GITHUB_ENV
          qa_deps_route="${{ secrets.QA_API_URL }}/deployments"
          RESPONSE_FILE=/tmp/response.txt
          put_response=$(curl -X PUT \
            -so "${RESPONSE_FILE}" \
            -w "%{http_code}" "${qa_deps_route}" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            --cookie "${{ secrets.YA_AUTH_COOKIE_NAME_VALUE }}" \
            -d "{ \
               \"Branch\": \"${{ env.BRANCH }}\", \
               \"Project\": \"$project_name\", \
               \"Stand\": \"${{ env.NAMESPACE }}\", \
               \"TriggeredBy\": \"${{ github.actor }}\", \
               \"VcsNumber\": \"${{ matrix.project.image_version }}\", \
               \"buildId\": ${{ github.run_id }} \
               }")
          if [ "${put_response}" == "200" ]; then
            echo "Deployment creation OK"
            exit 0
          elif [ "${put_response}" == "409" ]; then
            echo "Deployment already exists"
            exit 0
          else
            echo "Cannot create deployment"
            echo "${put_response}"
            cat "${RESPONSE_FILE}" && exit 1
          fi
