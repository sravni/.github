# Модуль для сбора информации о проектах в репозитории.
# Формирует JSON вида:
# [
#  {
#    "project_name": "sravni-signer-service",
#    "dockerfile": "Sravni.Signer.Service/Dockerfile",
#    "project_path": "Sravni.Signer.Service",
#    "k8s_yaml_path": "Sravni.Signer.Service/.k8s/ya-dev.yaml",
#    "k8s_canary_yaml_path": "Sravni.Signer.Service/.k8s/ya-prod-canary.yaml",
#    "build_number": "b2a14ff-qa",
#    "image_name": "sravni-signer-service:b2a14ff-qa",
#    "image_version": "b2a14ff-qa"
#  }
# ]
#
# В массиве по одному объекту для каждого проекта найденного в репозитории. Проектом считается папка в которой
# находится Dockerfile и папка .k8s с ямлями. Если задать параметр project_path_mask, то в результат попадут 
# только те проекты, папки которых удовлетворяют этой маске.

name: Get projects

on:
  workflow_call:
    inputs:
      project_path_mask:
        description: 'Маска пути для поиска проектов'
        required: false
        type: string
        default: '*'
      image_version:
        description: "Версия образа"
        required: false
        type: string
      k8s_yaml_file_name:
        description: "Имя файла {environment}.yaml в директории .k8s проекта для валидации его наличия и передачи следующим джобам"
        required: true
        type: string
      k8s_canary_yaml_file_name:
        description: "Имя canary файла {environment}.yaml в директории .k8s проекта для валидации его наличия и передачи следующим джобам"
        required: false
        type: string
      is_stage:
        description: "Запускается ли план для публикации на стейдж"
        required: false
        type: boolean
        default: false
      runner:
        description: "Указывает какой раннер будет использоваться для запуска флоу"
        required: false
        default: ubuntu-latest
        type: string

    outputs:
      projects:
        description: 'JSON-массив с объектами с информацией о найденных проектах'
        value: ${{ jobs.get_projects.outputs.projects }}

jobs:
  
  get_projects:
    runs-on: ${{ inputs.runner }}

    outputs:
      projects: ${{ steps.get_projects_multi.outputs.projects || steps.get_projects_mono.outputs.projects }}
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Get build number and image version
        run: |
          if [[ -z "${{ inputs.image_version }}" ]]
          then
            build_number=$(echo ${GITHUB_SHA} | cut -c1-7)
            if [[ "${{ inputs.is_stage }}" == "true" ]]
              then build_number="$build_number-qa"
            fi
            image_version="${build_number}"
          else
            image_version="${{ inputs.image_version }}"
          fi
          echo "BUILD_NUMBER=$build_number" >> $GITHUB_ENV
          echo "IMAGE_VERSION=$image_version" >> $GITHUB_ENV

      # Определяет тип репозитория: односервисный или мульисервисный.
      # Определяет по наличию Dockerfile в корне репозитория: если он там есть, то
      # считаем, что в этой репе один сервис. В этом случае именем сервиса будет имя репы.
      - name: Check repo type
        id: repo_type
        run: |
          if [[ -f './Dockerfile' ]]
          then
            echo 'Определили репозиторий как моносервисный'
            echo "repo_type='mono'" >> $GITHUB_OUTPUT
          else
            echo 'Определили репозиторий как мультисервисный'
            echo "repo_type='multi'" >> $GITHUB_OUTPUT
          fi

      - name: Get projects (multi)
        id: get_projects_multi
        run: |
          # Выходим, если репозиторий не мультисервисный
          if [[ ${{ steps.repo_type.outputs.repo_type }} != 'multi' ]]; then exit 0; fi

          projects=$(for p in $(find * -maxdepth 3 -path "${{ inputs.project_path_mask }}/Dockerfile")
            do  
              project_path=$(echo $p | sed -E 's|(.*)/Dockerfile$|\1|')
              if [[ ! -f "$project_path/.k8s/${{ inputs.k8s_yaml_file_name }}" ]]
              then 
                echo ""
              else
                project_name=$(echo $p | sed -E 's|(.*/\|)(.*)/Dockerfile$|\2|' | tr '[:upper:]' '[:lower:]' | sed 's|\.|-|g')
                image_name="${project_name}:${{ env.IMAGE_VERSION }}"
                echo "{ \"project_name\":\"$project_name\", \
                        \"dockerfile\":\"$p\", \
                        \"project_path\":\"$project_path\", \
                        \"k8s_yaml_path\":\"$project_path/.k8s/${{ inputs.k8s_yaml_file_name }}\", \
                        \"k8s_canary_yaml_path\":\"$project_path/.k8s/${{ inputs.k8s_canary_yaml_file_name }}\", \
                        \"build_number\":\"${{ env.BUILD_NUMBER }}\", \
                        \"image_name\":\"$image_name\", \
                        \"image_version\":\"${{ env.IMAGE_VERSION }}\" }"
              fi
            done | jq -src '.')
          echo 'Найдены следующие проекты:'
          echo $projects | jq -r '.[] | .project_name'
          echo "projects=${projects}" >> $GITHUB_OUTPUT

      - name: Get projects (mono)
        id: get_projects_mono
        run: |
          # Выходим, если репозиторий не моносервисный
          if [[ ${{ steps.repo_type.outputs.repo_type }} != 'mono' ]]; then exit 0; fi

          project_name=$(basename `git rev-parse --show-toplevel`) # имя сервиса по названию репы
          image_name="${project_name}:${{ env.IMAGE_VERSION }}"
          project_path='.'
          projects=$(
            if [[ ! -f "$project_path/.k8s/${{ inputs.k8s_yaml_file_name }}" ]]
            then
              echo ""
            else 
              echo "{ \"project_name\":\"$project_name\", \
                    \"dockerfile\":\"./Dockerfile\", \
                    \"project_path\":\"$project_path\", \
                    \"k8s_yaml_path\":\"$project_path/.k8s/${{ inputs.k8s_yaml_file_name }}\", \
                    \"k8s_canary_yaml_path\":\"$project_path/.k8s/${{ inputs.k8s_canary_yaml_file_name }}\", \
                    \"build_number\":\"${{ env.BUILD_NUMBER }}\", \
                    \"image_name\":\"$image_name\", \
                    \"image_version\":\"${{ env.IMAGE_VERSION }}\" }"
            fi | jq -src '.')
          echo $projects
          echo 'Найдены следующие проекты:'
          echo $projects | jq -r '.[] | .project_name'
          echo "projects=${projects}" >> $GITHUB_OUTPUT

