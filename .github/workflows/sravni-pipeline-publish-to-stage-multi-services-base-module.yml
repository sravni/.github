name: publish to stage services base module

#Запуск на любой пуш в ветку master/yandex или на PR в них
on:
  workflow_call:
    inputs:
      target_namespace:
        description: 'Namespace'
        required: false 
        type: string
      team:
        description: 'team name'
        required: true
        type: string
    secrets: 
      GH_TOKEN:
        required: true
      GITHUB_NPM_TOKEN:
        required: true
      CONTAINER_REGISTRY:
        required: true
      DOCKER_LOGIN:
        required: true
      DOCKER_PASS:
        required: true
      YANDEX_KEY:
        required: true
      YANDEX_CLOUD_ID:
        required: true
      YANDEX_FOLDER_ID:
        required: true
      QA_API_URL:
        required: true
      QAENV_REF:
        required: true

#Переменные окружения !!!!!!!!ВАЖНО!!!!!!!!! необходимо прописать свою команду
env:
  team: ${{ inputs.team }}
  image_pull_secret_acr: sravni-azurecr-io

#Описание Джобов воркфлоу
jobs:
  #Описание Джобы get_services и ее шага, в котором происходит составление
  #матрицы бэкоффисов по маске *.Services и ее сохранения для дальнейшего использования
  get_services:
    runs-on: ubuntu-latest

    outputs:
      services: ${{ steps.get-services.outputs.services }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Get services
        id: get-services
        run: |
          services=$(ls -d *.Service | jq -R '[.]' | jq -s -c 'add')
          echo "Services list: ${services}"
          echo "::set-output name=services::${services}"

#Описание джобы prepublish
  prepublish:
    #runs-on указывает какой раннер будет использоваться для запуска данной Джобы
    #ubuntu-latest - офф раннер гитхаба на основе дистрибутива ubuntu
    #раннеры на основе других дистрибутивов можно найти в следующей доке:
    #https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
    #                           !!!!!!!!!!!!ВАЖНО!!!!!!!!!!
    #sravni_ycloud_stage - наш раннер, необходимо указывать при наличии интегротестов
    #                          !!!!!!!!!!!!!!!!!!!!!!!!!!!!
    runs-on: sravni_ycloud_stage
    needs: [get_services]

    outputs:
      branch: ${{ env.branch }}
      service_name: ${{ env.service_name }}
      build_number: ${{ env.build_number }}

    strategy:
      matrix:
        service: ${{ fromJson(needs.get_services.outputs.services) }}

    steps:
      #checkout - собственно чекаут репозитория
      - name: Checkout source
        uses: actions/checkout@v2

      #Шаги проверки ивента и выставления имени бранчи в зависимости от него
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        run: |
          branch=$(echo ${GITHUB_REF#refs/heads/} | tr / -)
          if [ $branch == "yandex" ]; then branch="master";fi
          echo "branch=$branch" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        run: |
          branch=$(echo ${GITHUB_HEAD_REF} | tr / -)
          if [ $branch == "yandex" ]; then branch="master";fi
          echo "branch=$branch" >> $GITHUB_ENV

      #Шаг получения необходимых переменных для работы пайплайна
      #service_name - получается из имени репозитория, например osago-frontend
      #build_number - тег нашего образа, состоит из sha коммита и постфикса qa для стейдж окружения, для прода постфикс отсутствует
      #image_name - полное имя образа, к примеру sravni.azurecr.io/osago-frontend:ha751ufq
      - name: Set build vars to GITHUB_ENV
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          build_number=$(echo ${GITHUB_SHA} | cut -c1-7)
          image_name="${{ secrets.CONTAINER_REGISTRY }}/${service_name}:${build_number}"
          echo "build_number=$build_number" >> $GITHUB_ENV
          echo "image_name=$image_name" >> $GITHUB_ENV

      #Шаг логина в наш реджестри в Azure
      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      #Шаг установки buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      #Шаг сборки образа (с пушем)
      - name: Docker build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          build-args: |
            build_number=${{ env.build_number }}
            GITHUB_TOKEN=${{ secrets.GH_TOKEN }}
            GITHUB_USERNAME=sravni
            GITHUB_NPM_TOKEN=${{ secrets.GH_TOKEN }}
          push: true
          tags: "${{ env.image_name }}"


#Описание джобы publish
  publish:
    runs-on: ubuntu-latest
    needs: [prepublish, get_services]

    #Все шаги будут примерняться на матрице, полученной в предыдущей джобе
    strategy:
      matrix:
        service: ${{ fromJson(needs.get_services.outputs.services) }}

    #Все шаги будут использовать переменные окружения с предыдущей джобы
    env:
      build_number: ${{ needs.prepublish.outputs.build_number }}
      branch: ${{ needs.prepublish.outputs.branch }}
      service_name: ${{ needs.prepublish.outputs.service_name }}

    steps:

      - name: Install werf CLI
        uses: werf/actions/install@v1.2

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: Install Yandex cli
        run:  |
          wget -P tmp/ https://storage.yandexcloud.net/yandexcloud-yc/release/0.85.0/linux/amd64/yc
          chmod +x tmp/yc
          mv tmp/yc /usr/local/bin/yc
          echo ${{ secrets.YANDEX_KEY }} | base64 --decode > tmp/key.json
          yc config profile create github
          yc config set service-account-key tmp/key.json
          yc managed-kubernetes \
            cluster get-credentials \
            --cloud-id ${{ secrets.YANDEX_CLOUD_ID }} \
            --folder-id ${{ secrets.YANDEX_FOLDER_ID }} \
            yc-stage-k8s --external

      #Шаг получения имени неймспейса из имени ветки и его проверка на валидность
      - name: Get namespace name
        id: get_namespace
        run: |
          echo "Current branch is ${{ env.branch }}"
          namespace=$(echo ${{ inputs.target_namespace || env.branch }} | awk -F '/' '{print $NF}')
          namespace=${namespace,,}
          regexp='^|[a-z|]|[-a-z0-9|]{1,12}|[a-z0-9|]$'
          if echo $namespace | grep -Eq $regexp; then
              echo "${namespace} is valid name"
          else
            echo "Only: letters, numbers, no more than 14 characters";
            exit 1;
          fi
          echo "namespace=${namespace}" >> $GITHUB_ENV

      - name: Login to ACR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.CONTAINER_REGISTRY }}
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Checkout source
        uses: actions/checkout@v2

      - name: Checkout qaenv helpers
        uses: actions/checkout@v2
        with:
          repository: sravni/qa-environment-helpers
          path: qaenv
          token: ${{ secrets.GH_TOKEN }}
          ref: ${{ secrets.QAENV_REF }}

      - name: Checkout helm repo
        uses: actions/checkout@v2
        with:
          repository: sravni/helm-charts
          path: charts
          token: ${{ secrets.GH_TOKEN }}
          ref: '${{ secrets.CHARTS_REF }}'

      #Шаг проверки наличия уже созданного неймспейса
      - name: Check if namespace already exists
        run: |
          RESPONSE_FILE=/tmp/${{ env.build_number }}.txt
          qa_envs_route="${{ secrets.QA_API_URL }}/environments"
          get_response=$(curl -X GET -so "${RESPONSE_FILE}" -w "%{http_code}" ${qa_envs_route}/${{ env.namespace }} \
          --cookie "${{ secrets.YA_AUTH_COOKIE_NAME_VALUE }}" \
          -H "accept: application/json")
          namespace_exists=0
          if [ $get_response == "200" ]; then
              echo "Environment ${{ env.namespace }} already exists"
              namespace_exists=1
          elif [ $get_response != "404" ]; then
              echo "Server returned:"
              cat "${RESPONSE_FILE}" && exit 1
          fi
          echo "namespace_exists=${namespace_exists}" >> $GITHUB_ENV

      #Шаг создания неймспейса в qa-dashboard, необходимых ресурсов и ключей identity
      - name: Create namespace
        if: ${{ env.namespace_exists == 0 }}
        run: |
          RESPONSE_FILE=/tmp/${{ env.build_number }}.txt
          qa_envs_route="${{ secrets.QA_API_URL }}/environments"
          env_name=${{ env.namespace }}
          put_response=$(curl -X PUT \
            -so "${RESPONSE_FILE}" \
            -w "%{http_code}" $qa_envs_route \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            --cookie "${{ secrets.YA_AUTH_COOKIE_NAME_VALUE }}" \
            -d "{ \"createdBy\": \"${{ github.actor }}\", \"kind\": \"QA\", \"name\": \"${{ env.namespace }}\", \"team\": \"${{ env.team }}\"}")
          if [ "${put_response}" != "200" ]; then
            echo "Cannot create environment ${{ env.namespace }}"
            cat "${RESPONSE_FILE}" && exit 1
          fi
          echo "Environment ${{ env.namespace }} has been created"
          export EnvironmentName=${{ env.namespace }}
          cat ./qaenv/k8s-manifests/new-namespace-yandex.yml | envsubst | kubectl apply -f -
          echo "Manifest has been applied"
          /bin/bash ./qaenv/scripts/identity-key/new-identity-key.sh
          echo "Identity key has been generated"
          kubectl -n ${{ env.namespace }} create secret generic identity-key --from-file ./identity.pfx
          echo "Identity key secret has been created"
          kubectl -n ${{ env.namespace }} create secret generic labs-identity-key --from-file ./identity.pfx
          echo "Labs identity key secret has been created"

      #Шаг деплоя в стейдж
      - name: Publish
        working-directory: ./charts/generic-application/
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          echo "Trying to deploy ${service_name}..."
          helm dependencies update
          werf helm upgrade --install \
            "${service_name}" \
            --namespace "${{ env.namespace }}" \
            --timeout 10m \
            --wait \
            --set global.image.repository="${{ secrets.CONTAINER_REGISTRY }}/${service_name}" \
            --set global.image.tag="${{ env.build_number }}" \
            --set global.imagePullSecrets[0]="${{ env.image_pull_secret_acr }}" \
            --set cronjobs.defaults.resources.enabled=false \
            --set resources.enabled=false \
            -f ../.././"${{ matrix.service }}"/.k8s/ya-stage.yaml \
            ./ \
            2>&1
          if [ $? != 0 ]; then
            echo "Publish failed, see logs" && exit 1
          fi
          echo "Done"

      #Шаг отправки информации о деплое в qa-dashboard
      - name: Set info about deployment to qa-environment-service
        if: ${{ success() }}
        run: |
          service_name=${{ matrix.service }}
          service_name=$(echo "${service_name}" | tr '[:upper:]' '[:lower:]')
          service_name=${service_name//./-}
          echo "DEPLOY_STATE=successful" >> $GITHUB_ENV
          qa_deps_route="${{ secrets.QA_API_URL }}/deployments"
          RESPONSE_FILE=/tmp/${{ env.build_number }}.txt
          put_response=$(curl -X PUT \
            -so "${RESPONSE_FILE}" \
            -w "%{http_code}" "${qa_deps_route}" \
            -H "accept: application/json" \
            -H "Content-Type: application/json" \
            --cookie "${{ secrets.YA_AUTH_COOKIE_NAME_VALUE }}" \
            -d "{ \
               \"Branch\": \"${{ env.branch }}\", \
               \"Project\": \"${service_name}\", \
               \"Stand\": \"${{ env.namespace }}\", \
               \"TriggeredBy\": \"${{ github.actor }}\", \
               \"VcsNumber\": \"${{ env.build_number }}\", \
               \"buildId\": ${{ github.run_id }} \
               }")
          if [ "${put_response}" == "200" ]; then
            echo "Deployment creation OK"
            exit 0
          elif [ "${put_response}" == "409" ]; then
            echo "Deployment already exists"
            exit 0
          else
            echo "Cannot create deployment"
            echo "${put_response}"
            cat "${RESPONSE_FILE}" && exit 1
          fi
