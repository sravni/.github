### Универсальный модуль публикации проектов на PROD
# Принимает на вход название команды и JSON с информацией о проектах для деплоя.

name: Publish to prod projects base module

on:
  workflow_call:
    inputs:
      team:
        description: 'team'
        required: true
        type: string
      projects:
        description: "JSON объект со списком проектов для публикации"
        required: true
        type: string
      url_prefix:
        description: "Префикс адреса ингресса (если пусто, то используется имя ветки)"
        required: false
        type: string
        default: ''
      runner:
        description: "Указывает какой раннер будет использоваться для запуска флоу"
        required: false
        default: sravni_infra_build_small
        type: string
      additional_values_file_path:
        description: "Путь к файлу с дополнительными переменными"
        required: false
        default: ''
        type: string
    secrets:
      TEST_CI_PAT_FOR_ACTIONS:
        required: true
      HARBOR_REGISTRY:
        required: true
      HARBOR_LOGIN:
        required: true
      HARBOR_PASSWORD:
        required: true

env:
  TEAM: ${{ inputs.team }}
  ADDITIONAL_VALUES_FILE_PATH: ${{ inputs.additional_values_file_path }}

jobs:
  vars:
    name: Setup variables
    runs-on: ${{ inputs.runner }}
    outputs:
      team: ${{ steps.set_team.outputs.team }}
    steps:
      - name: Set team
        id: set_team
        run: echo "team=${TEAM,,}" >> $GITHUB_OUTPUT

  publish:
    runs-on: ${{ inputs.runner }}
    needs: [ vars ]

    env:
      TEAM: ${{ needs.vars.outputs.team }}
      REPO_PATH: './deploy/${{ needs.vars.outputs.team }}'
      YQ_VERSION: '4.30.3'

    strategy:
      max-parallel: 1
      matrix:
        project: ${{ fromJson(inputs.projects) }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Checkout deploy repo
        uses: actions/checkout@v4
        with:
          repository: sravni/deploy
          token: ${{ secrets.TEST_CI_PAT_FOR_ACTIONS }}
          path: deploy
          ref: main

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_LOGIN }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      # Проверка - существует ли приложение в dev окружении.
      - name: Ensure project exist
        run: |
          if [[ -d ${{ env.REPO_PATH }}/${{ matrix.project.project_name }} ]];
          then
            echo 'Проект ${{ env.REPO_PATH }}/${{ matrix.project.project_name }} уже существует'
          else
            echo 'Проект ${{ env.REPO_PATH }}/${{ matrix.project.project_name }} не существует, создайте его сначала в dev окружении!'
          fi;

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v${{ env.YQ_VERSION }}/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Install gomplate
        run: |
          if [ "${{ env.ADDITIONAL_VALUES_FILE_PATH }}" != "" ];
          then
            sudo curl -o /usr/local/bin/gomplate -sSL https://github.com/hairyhenderson/gomplate/releases/download/v3.11.3/gomplate_linux-amd64
            sudo chmod 755 /usr/local/bin/gomplate;
          fi;

      # Копирование *.yaml файла с вэйльюсами из репы сервиса в deploy. Фактическое название файла приходит в JSON'е в projects.
      # Имя этого файла должно стать values_prod.yaml.
      - name: Clone values from origin repo
        run: |
          if [ "${{ env.ADDITIONAL_VALUES_FILE_PATH }}" != "" ];
          then
            cat ${{ matrix.project.k8s_yaml_path }} | gomplate -d external_service=${{ env.REPO_PATH }}/${{ env.ADDITIONAL_VALUES_FILE_PATH }} > ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}/values_prod.yaml
          else
            cat ${{ matrix.project.k8s_yaml_path }} > ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}/values_prod.yaml
          fi;

      - name: Create app
        run: >
          grep -xq '  - name: ${{ matrix.project.project_name }}' ${{ env.REPO_PATH }}/_apps/values_prod.yaml
          || yq e  -i '.services += {"name": "${{ matrix.project.project_name }}", "autosync": "disabled"}' ${{ env.REPO_PATH }}/_apps/values_prod.yaml;

      # Устанавливаем tag образа и убеждаемся, что установлены `global.image.repository` и `global.imagePullSecrets`
      - name: Modify values
        run: >
          yq -i '.global.image.tag = "${{ matrix.project.image_version }}" |
          .global.image.repository = "registry.yc.prod.infra.sravni.market/${{ env.TEAM }}_prod/${{ matrix.project.project_name }}" |
          .global.imagePullSecrets[0] = "harbor-pull-secret"'
          ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}/values_prod.yaml;

      # Обновляем зависимости чартов
      - name: Helm dep update
        working-directory: ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}
        run: helm dependency update
      
      # Проверяем сборку темплейтов
      - name: Helm check
        working-directory: ${{ env.REPO_PATH }}/${{ matrix.project.project_name }}
        run: helm template . -f values_prod.yaml
          
      # Добавляет коммит для поля info в Argo вида
      # commit: sravni/mortgageinsurance/commit/2b13e85a9c5e439b79e406f08a0cde673fa1f4a3
      - name: Adding commit SHA
        run: >
          FULL_SHA=${GITHUB_SHA}
          && GIT_REPO=${GITHUB_REPOSITORY}
          && KEY=$(yq '.services | to_entries | .[] | select(.value.name == "${{ matrix.project.project_name }}") | .key' ${{ env.REPO_PATH }}/_apps/values_prod.yaml)
          && yq -i e ".services[$KEY].commit = \"$GIT_REPO/commit/$FULL_SHA\"" ${{ env.REPO_PATH }}/_apps/values_prod.yaml

      - name: Do rebase and commit
        run: >
          cd ./deploy
          && git add .
          && git -c user.name="sravnidevops" -c user.email="company-service@sravni.ru" commit --author="${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>" -m "${{ matrix.project.project_name }} new version: ${{ matrix.project.image_version }} / run_id: ${{ github.run_id }}"
          && git -c user.name="sravnidevops" -c user.email="company-service@sravni.ru" pull --rebase
          && git push origin main || sleep 10
          && git -c user.name="sravnidevops" -c user.email="company-service@sravni.ru" pull --rebase
          && git push origin main
          && cd ../
