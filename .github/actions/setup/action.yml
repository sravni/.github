name: "Setup BentoML"
description: "Bootstrap and setup base environment for BentoML"
branding:
  icon: 'box'
  color: 'orange'
inputs:
  bentoml-version:
    description: The version of BentoML to use. Leave it empty to use the latest version, set to 'main' to use 'nightly'
    required: false
    default: ""
  python-version:
    description: Default Python version
    required: false
    default: "3.10"
  architecture:
    description: 'Which architecture to run on'
    required: false
    default: x64
runs:
  using: composite
  steps:
    - name: Checkout source
      shell: bash
      run: |
        set -eux
        echo "Checking out the repository..."
        git --version

    - name: Configure APT proxy & install Python
      shell: bash
      run: |
        set -eux

        UBUNTU_VERSION=$(grep "VERSION_CODENAME" /etc/os-release | cut -d'=' -f2)
        ARTIFACTORY_URL="https://artifactory.yc.prod.infra.sravni.market/artifactory/ubuntu_proxy"

        echo "Configuring APT proxy for Artifactory ($UBUNTU_VERSION)..."

        echo "deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION} main restricted
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION}-updates main restricted
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION} universe
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION}-updates universe
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION} multiverse
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION}-updates multiverse
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION}-backports main restricted universe multiverse
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION}-security main restricted
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION}-security universe
        deb ${ARTIFACTORY_URL} ${UBUNTU_VERSION}-security multiverse" | sudo tee /etc/apt/sources.list

        echo "Updating APT cache..."
        sudo apt update -o Acquire::https::Verify-Peer=false -o Acquire::https::Verify-Host=false

        PYTHON_VERSION="${{ inputs.python-version }}"

        echo "Installing Python ${PYTHON_VERSION} from Artifactory..."
        sudo apt install -y --no-install-recommends \
            python${PYTHON_VERSION} \
            ca-certificates

        if [[ ! -f "/usr/bin/python3" ]]; then
            sudo ln -s /usr/bin/python${PYTHON_VERSION} /usr/bin/python3
        fi

        echo "Python ${PYTHON_VERSION} successfully installed from Artifactory!"

    - name: Verify Python installation
      shell: bash
      run: |
        set -eux
        echo "Using system Python version: ${{ inputs.python-version }}"
        python3 --version

    - name: Configure pip cache manually
      shell: bash
      run: |
        set -eux
        export PIP_CACHE_DIR="$HOME/.cache/pip"
        mkdir -p "$PIP_CACHE_DIR"
        echo "PIP cache directory: $PIP_CACHE_DIR"
        echo "PIP_CACHE_DIR=$PIP_CACHE_DIR" >> "$GITHUB_ENV"

    - name: Install dependencies with caching
      shell: bash
      run: |
        set -eux

        echo "Installing BentoML..."
        if [[ -n "${{ inputs.bentoml-version }}" ]]; then
          pip install -U "bentoml==${{ inputs.bentoml-version }}" -i https://artifactory.yc.prod.infra.sravni.market/artifactory/api/pypi/pypi.org_proxy/simple --cache-dir="$PIP_CACHE_DIR" --timeout=300
        else
          pip install -U "bentoml>=1.0.25" -i https://artifactory.yc.prod.infra.sravni.market/artifactory/api/pypi/pypi.org_proxy/simple --cache-dir="$PIP_CACHE_DIR" --timeout=300
        fi

        echo "Successfully installed BentoML: $(bentoml --version)"

        echo "Installing hatch and towncrier..."
        pip install hatch towncrier -i https://artifactory.yc.prod.infra.sravni.market/artifactory/api/pypi/pypi.org_proxy/simple --cache-dir="$PIP_CACHE_DIR" --timeout=300
